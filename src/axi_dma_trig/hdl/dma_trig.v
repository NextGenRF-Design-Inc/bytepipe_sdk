// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\dma_trig_model\dma_trig.v
// Created: 2023-06-05 09:06:23
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2.03451e-08
// Target subsystem base rate: 2.03451e-08
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dma_trig
// Source Path: dma_trig_model/dma_trig
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dma_trig
          (axis_aclk,
           s_axis_tdata,
           s_axis_tvalid,
           threshold,
           arm,
           trig_edge,
           trig_type,
           ext_trig,
           m_axis_tdata,
           m_axis_tvalid);


  input   axis_aclk;
  input   [31:0] s_axis_tdata;  // uint32
  input   s_axis_tvalid;
  input   [31:0] threshold;  // ufix32_En30
  input   arm;
  input   trig_edge;  // ufix1
  input   [1:0] trig_type;  // ufix2
  input   ext_trig;
  output  [31:0] m_axis_tdata;  // uint32
  output  m_axis_tvalid;


  reg [31:0] Delay9_bypass_delay;  // ufix32
  reg [31:0] Delay9_reg;  // ufix32
  wire [31:0] Delay9_out1;  // uint32
  wire signed [15:0] datain_re;  // sfix16_En15
  wire signed [15:0] datain_im;  // sfix16_En15
  reg  validin;
  wire signed [32:0] mag_out1;  // sfix33_En30
  wire mag_out2;
  wire [31:0] ave_out1;  // ufix32_En30
  wire latch;
  reg  Delay5_out1;
  reg  [0:1] delayMatch_reg;  // ufix1 [2]
  wire [0:1] delayMatch_reg_next;  // ufix1 [2]
  wire validin_1;
  wire valid;
  reg  validout;
  reg [31:0] Delay1_out1;  // uint32
  reg [31:0] delayMatch1_reg [0:1];  // ufix32 [2]
  wire [31:0] delayMatch1_reg_next [0:1];  // ufix32 [2]
  wire [31:0] Delay1_out1_1;  // uint32
  reg [31:0] Delay3_bypass_delay;  // ufix32
  reg [31:0] Delay3_reg;  // ufix32
  wire [31:0] Delay3_out1;  // uint32

wire clk;
wire reset_x;

assign reset_x = 1'b1;
assign clk = axis_aclk;
  initial begin
    Delay9_bypass_delay = 32'b00000000000000000000000000000000;
    Delay9_reg = 32'b00000000000000000000000000000000;
    validin = 1'b0;
    Delay5_out1 = 1'b0;
    delayMatch_reg[0] = 1'b0;
    delayMatch_reg[1] = 1'b0;
    validout = 1'b0;
    Delay1_out1 = 32'b00000000000000000000000000000000;
    delayMatch1_reg[0] = 32'b00000000000000000000000000000000;
    delayMatch1_reg[1] = 32'b00000000000000000000000000000000;
    Delay3_bypass_delay = 32'b00000000000000000000000000000000;
    Delay3_reg = 32'b00000000000000000000000000000000;
  end

  always @(posedge clk)
    begin : Delay9_process
      if (s_axis_tvalid) begin
        Delay9_bypass_delay <= Delay9_reg;
        Delay9_reg <= s_axis_tdata;
      end
    end

  assign Delay9_out1 = (s_axis_tvalid == 1'b1 ? Delay9_reg :
              Delay9_bypass_delay);



  convert u_convert (.datain(Delay9_out1),  // uint32
                     .dataout_re(datain_re),  // sfix16_En15
                     .dataout_im(datain_im)  // sfix16_En15
                     );

  always @(posedge clk)
    begin : Delay2_process
      validin <= s_axis_tvalid;
    end



  mag u_mag (.clk(clk),
             .datain_re(datain_re),  // sfix16_En15
             .datain_im(datain_im),  // sfix16_En15
             .validin(validin),
             .magout(mag_out1),  // sfix33_En30
             .validout(mag_out2)
             );

  ave u_ave (.clk(clk),
             .magin(mag_out1),  // sfix33_En30
             .validin(mag_out2),
             .magout(ave_out1)  // ufix32_En30
             );

  trigger u_trigger (.clk(clk),
                     .reset_x(reset_x),
                     .threshold(threshold),  // ufix32_En30
                     .magin(ave_out1),  // ufix32_En30
                     .edge_rsvd(trig_edge),  // ufix1
                     .type_rsvd(trig_type),  // ufix2
                     .ext_trig(ext_trig),
                     .enable(arm),
                     .trigger_1(latch)
                     );

  always @(posedge clk)
    begin : Delay5_process
      Delay5_out1 <= latch;
    end



  always @(posedge clk)
    begin : delayMatch_process
      delayMatch_reg[0] <= delayMatch_reg_next[0];
      delayMatch_reg[1] <= delayMatch_reg_next[1];
    end

  assign validin_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = validin;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign valid = Delay5_out1 & validin_1;



  always @(posedge clk)
    begin : Delay15_process
      validout <= valid;
    end



  always @(posedge clk)
    begin : Delay1_process
      Delay1_out1 <= Delay9_out1;
    end



  always @(posedge clk)
    begin : delayMatch1_process
      delayMatch1_reg[0] <= delayMatch1_reg_next[0];
      delayMatch1_reg[1] <= delayMatch1_reg_next[1];
    end

  assign Delay1_out1_1 = delayMatch1_reg[1];
  assign delayMatch1_reg_next[0] = Delay1_out1;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];



  always @(posedge clk)
    begin : Delay3_process
      if (validout) begin
        Delay3_bypass_delay <= Delay3_reg;
        Delay3_reg <= Delay1_out1_1;
      end
    end

  assign Delay3_out1 = (validout == 1'b1 ? Delay3_reg :
              Delay3_bypass_delay);



  assign m_axis_tdata = Delay3_out1;

  assign m_axis_tvalid = validout;

endmodule  // dma_trig

