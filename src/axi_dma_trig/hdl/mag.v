// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\dma_trig_model\mag.v
// Created: 2023-06-05 09:06:23
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: mag
// Source Path: dma_trig_model/dma_trig/mag
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module mag
          (clk,
           datain_re,
           datain_im,
           validin,
           magout,
           validout);


  input   clk;
  input   signed [15:0] datain_re;  // sfix16_En15
  input   signed [15:0] datain_im;  // sfix16_En15
  input   validin;
  output  signed [32:0] magout;  // sfix33_En30
  output  validout;


  reg signed [15:0] Delay4_reg [0:1];  // sfix16 [2]
  wire signed [15:0] Delay4_reg_next [0:1];  // sfix16_En15 [2]
  wire signed [15:0] Delay4_out1;  // sfix16_En15
  reg signed [15:0] Delay4_out1_1;  // sfix16_En15
  wire signed [31:0] Product_out1;  // sfix32_En30
  reg signed [31:0] Product_out1_1;  // sfix32_En30
  reg signed [31:0] Delay3_reg [0:1];  // sfix32 [2]
  wire signed [31:0] Delay3_reg_next [0:1];  // sfix32_En30 [2]
  wire signed [31:0] Delay3_out1;  // sfix32_En30
  reg signed [15:0] Delay1_reg [0:1];  // sfix16 [2]
  wire signed [15:0] Delay1_reg_next [0:1];  // sfix16_En15 [2]
  wire signed [15:0] Delay1_out1;  // sfix16_En15
  reg signed [15:0] Delay1_out1_1;  // sfix16_En15
  wire signed [31:0] Product1_out1;  // sfix32_En30
  reg signed [31:0] Product1_out1_1;  // sfix32_En30
  reg signed [31:0] Delay5_reg [0:1];  // sfix32 [2]
  wire signed [31:0] Delay5_reg_next [0:1];  // sfix32_En30 [2]
  wire signed [31:0] Delay5_out1;  // sfix32_En30
  wire signed [32:0] Add_add_cast;  // sfix33_En30
  wire signed [32:0] Add_add_cast_1;  // sfix33_En30
  wire signed [32:0] Add_out1;  // sfix33_En30
  reg signed [32:0] Delay7_out1;  // sfix33_En30
  reg  [0:1] Delay2_reg;  // ufix1 [2]
  wire [0:1] Delay2_reg_next;  // ufix1 [2]
  wire Delay2_out1;
  reg  [0:1] Delay6_reg;  // ufix1 [2]
  wire [0:1] Delay6_reg_next;  // ufix1 [2]
  wire Delay6_out1;
  reg  Delay8_out1;

  initial begin
    Delay4_reg[0] = 16'sb0000000000000000;
    Delay4_reg[1] = 16'sb0000000000000000;
    Delay4_out1_1 = 16'sb0000000000000000;
    Product_out1_1 = 32'sb00000000000000000000000000000000;
    Delay3_reg[0] = 32'sb00000000000000000000000000000000;
    Delay3_reg[1] = 32'sb00000000000000000000000000000000;
    Delay1_reg[0] = 16'sb0000000000000000;
    Delay1_reg[1] = 16'sb0000000000000000;
    Delay1_out1_1 = 16'sb0000000000000000;
    Product1_out1_1 = 32'sb00000000000000000000000000000000;
    Delay5_reg[0] = 32'sb00000000000000000000000000000000;
    Delay5_reg[1] = 32'sb00000000000000000000000000000000;
    Delay7_out1 = 33'sh000000000;
    Delay2_reg[0] = 1'b0;
    Delay2_reg[1] = 1'b0;
    Delay6_reg[0] = 1'b0;
    Delay6_reg[1] = 1'b0;
    Delay8_out1 = 1'b0;
  end

  always @(posedge clk)
    begin : Delay4_process
      Delay4_reg[0] <= Delay4_reg_next[0];
      Delay4_reg[1] <= Delay4_reg_next[1];
    end

  assign Delay4_out1 = Delay4_reg[1];
  assign Delay4_reg_next[0] = datain_re;
  assign Delay4_reg_next[1] = Delay4_reg[0];



  always @(posedge clk)
    begin : reduced_process
      Delay4_out1_1 <= Delay4_out1;
    end



  assign Product_out1 = Delay4_out1_1 * Delay4_out1_1;



  always @(posedge clk)
    begin : PipelineRegister_process
      Product_out1_1 <= Product_out1;
    end



  always @(posedge clk)
    begin : Delay3_process
      Delay3_reg[0] <= Delay3_reg_next[0];
      Delay3_reg[1] <= Delay3_reg_next[1];
    end

  assign Delay3_out1 = Delay3_reg[1];
  assign Delay3_reg_next[0] = Product_out1_1;
  assign Delay3_reg_next[1] = Delay3_reg[0];



  always @(posedge clk)
    begin : Delay1_process
      Delay1_reg[0] <= Delay1_reg_next[0];
      Delay1_reg[1] <= Delay1_reg_next[1];
    end

  assign Delay1_out1 = Delay1_reg[1];
  assign Delay1_reg_next[0] = datain_im;
  assign Delay1_reg_next[1] = Delay1_reg[0];



  always @(posedge clk)
    begin : reduced_1_process
      Delay1_out1_1 <= Delay1_out1;
    end



  assign Product1_out1 = Delay1_out1_1 * Delay1_out1_1;



  always @(posedge clk)
    begin : PipelineRegister1_process
      Product1_out1_1 <= Product1_out1;
    end



  always @(posedge clk)
    begin : Delay5_process
      Delay5_reg[0] <= Delay5_reg_next[0];
      Delay5_reg[1] <= Delay5_reg_next[1];
    end

  assign Delay5_out1 = Delay5_reg[1];
  assign Delay5_reg_next[0] = Product1_out1_1;
  assign Delay5_reg_next[1] = Delay5_reg[0];



  assign Add_add_cast = {Delay3_out1[31], Delay3_out1};
  assign Add_add_cast_1 = {Delay5_out1[31], Delay5_out1};
  assign Add_out1 = Add_add_cast + Add_add_cast_1;



  always @(posedge clk)
    begin : Delay7_process
      Delay7_out1 <= Add_out1;
    end



  assign magout = Delay7_out1;

  always @(posedge clk)
    begin : Delay2_process
      Delay2_reg[0] <= Delay2_reg_next[0];
      Delay2_reg[1] <= Delay2_reg_next[1];
    end

  assign Delay2_out1 = Delay2_reg[1];
  assign Delay2_reg_next[0] = validin;
  assign Delay2_reg_next[1] = Delay2_reg[0];



  always @(posedge clk)
    begin : Delay6_process
      Delay6_reg[0] <= Delay6_reg_next[0];
      Delay6_reg[1] <= Delay6_reg_next[1];
    end

  assign Delay6_out1 = Delay6_reg[1];
  assign Delay6_reg_next[0] = Delay2_out1;
  assign Delay6_reg_next[1] = Delay6_reg[0];



  always @(posedge clk)
    begin : Delay8_process
      Delay8_out1 <= Delay6_out1;
    end



  assign validout = Delay8_out1;

endmodule  // mag

