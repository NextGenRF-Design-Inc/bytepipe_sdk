% This file contains code automatically generated by a machine.
% It has not been independently verified by any human.
% All code is provided as-is for example purposes only.
% The customer assumes all risks related to the use of this code.


% Transceiver Name: ADRV9002
% Silicon Revision: C0
% Evaluation Board Revision: 2B
% Tx / Rx optimal carrier frequencies: 30 MHz to 3 GHz
% External LO optimal frequencies: 60 MHz to 6 GHz
% 
% FPGA: v8.2.21
% Device Driver API: v48.49.2
% Device Driver Client: v48.49.2
% Firmware: v0.20.0.10
% Profile Generator: v0.50.5.0
% Stream Generator Assembly: v0.7.9.0
% Transceiver Evaluation Software: v0.20.0
% ADRV9001 Plugin: v0.20.0

function Adrv9001_Configure( obj ) % obj.adrv9001Device)

	INSTALL_DIRECTORY = 'C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/';
	CLIENT_DIRECTORY = 'C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/';
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.Peitho.dll']);
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.EvalClient.dll']);
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.EvalClient.Installers.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.Adrv9001.ProfileTypes.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.EvalClient.Adrv9001.Device.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.Peitho.dll']);
	import AnalogDevices.Peitho.*;
	import AnalogDevices.EvalClient.*;
	import AnalogDevices.EvalClient.Installers.*;
	import AnalogDevices.Peitho.*
	import AnalogDevices.EvalClient.Adrv9001.*
	import AnalogDevices.EvalClient.Adrv9001.Device.*
	import AnalogDevices.EvalClient.Adrv9001ProfileTypes.*
	import binary_9.*
	import binary_10.*
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.Adrv9001.ProfileTypes.dll']);
	import AnalogDevices.EvalClient.Adrv9001ProfileTypes.*

	obj.status_string = sprintf("Configuring features.\n");
	loidConfig_1 = AnalogDevices.EvalClient.Adrv9001.adrv9001_RxrfdcLoidCfg_t(false, 61);
	[error_code] = obj.adrv9001Device.rx.Loid_Configure(common_ChannelNumber_e.CHANNEL_1, loidConfig_1);
	[error_code] = obj.adrv9001Device.rx.Loid_Configure(common_ChannelNumber_e.CHANNEL_2, loidConfig_1);
	agcCfg_power_3 = AnalogDevices.EvalClient.Adrv9001.adrv9001_PowerDetector_t(true, 10, 4, 2, 4, 10, 2, 0, 0, 0, 7, 4, 4, adrv9001_GpioPinCrumbSel_e.ADRV9001_GPIO_PIN_CRUMB_UNASSIGNED, adrv9001_GpioPinCrumbSel_e.ADRV9001_GPIO_PIN_CRUMB_UNASSIGNED);
	agcCfg_peak_3 = AnalogDevices.EvalClient.Adrv9001.adrv9001_PeakDetector_t(50, 2, 4, 26, 18, 6, 3, 4, 0, false, 1, 1, 8191, 5826, 8230, 5812, 6, 3, 4, 6, 4, 4, 0, 3, 3, adrv9001_GpioPinCrumbSel_e.ADRV9001_GPIO_PIN_CRUMB_UNASSIGNED, adrv9001_GpioPinCrumbSel_e.ADRV9001_GPIO_PIN_CRUMB_UNASSIGNED);
	agcCfg_extLna_3 = AnalogDevices.EvalClient.Adrv9001.adrv9001_ExtLna_t(0, 0, 0);
	agcCfg_3 = AnalogDevices.EvalClient.Adrv9001.adrv9001_GainControlCfg_t(4, 255, 195, 11520, 10, 16, false, 3, adrv9001_RxGainControlDetectionMode_e.ADRV9001_RX_GAIN_CONTROL_DETECTION_MODE_PEAK, false, 255, false, false, agcCfg_power_3, agcCfg_peak_3, agcCfg_extLna_3, true, adrv9001_GpioPin_e.ADRV9001_GPIO_UNASSIGNED);
	[error_code] = obj.adrv9001Device.gainControl.Configure(common_ChannelNumber_e.CHANNEL_1, agcCfg_3);
	[error_code] = obj.adrv9001Device.gainControl.Configure(common_ChannelNumber_e.CHANNEL_2, agcCfg_3);
	gpIntMask_5 = 0;
	[error_code, gpIntMask_5] = obj.adrv9001Device.gpio.GpIntMask_Get(gpIntMask_5);
	obj.status_string = sprintf("GpIntMask_Get parameter 'gpIntMask' read back as '" + gpIntMask_5 + "'\n");
	[error_code] = obj.adrv9001Device.gpio.GpIntMask_Set(16);
	[error_code] = obj.adrv9001Device.tx.AttenuationMode_Set(common_ChannelNumber_e.CHANNEL_1, adrv9001_TxAttenuationControlMode_e.ADRV9001_TX_ATTENUATION_CONTROL_MODE_SPI);
	[error_code] = obj.adrv9001Device.tx.Attenuation_Set(common_ChannelNumber_e.CHANNEL_1, 10000);
	[error_code] = obj.adrv9001Device.tx.AttenuationMode_Set(common_ChannelNumber_e.CHANNEL_2, adrv9001_TxAttenuationControlMode_e.ADRV9001_TX_ATTENUATION_CONTROL_MODE_SPI);
	[error_code] = obj.adrv9001Device.tx.Attenuation_Set(common_ChannelNumber_e.CHANNEL_2, 10000);
	rxInterfaceGainConfig_11 = AnalogDevices.EvalClient.Adrv9001.adrv9001_RxInterfaceGainCtrl_t(adrv9001_RxInterfaceGainUpdateTiming_e.ADRV9001_RX_INTERFACE_GAIN_UPDATE_TIMING_NOW, adrv9001_RxInterfaceGainCtrlMode_e.ADRV9001_RX_INTERFACE_GAIN_CONTROL_MANUAL, adrv9001_RxInterfaceGain_e.ADRV9001_RX_INTERFACE_GAIN_0_DB, 255, 10, 0, 0);
	[error_code] = obj.adrv9001Device.rx.InterfaceGain_Configure(common_ChannelNumber_e.CHANNEL_1, rxInterfaceGainConfig_11);
	[error_code] = obj.adrv9001Device.rx.InterfaceGain_Configure(common_ChannelNumber_e.CHANNEL_2, rxInterfaceGainConfig_11);
	powerSavingCfg_13 = AnalogDevices.EvalClient.Adrv9001.adrv9001_PowerSavingAndMonitorMode_ChannelPowerSavingCfg_t(adrv9001_PowerSavingAndMonitorMode_ChannelPowerDownMode_e.ADRV9001_POWERSAVINGANDMONITORMODE_CHANNEL_MODE_DISABLED, adrv9001_PowerSavingAndMonitorMode_ChannelPowerDownMode_e.ADRV9001_POWERSAVINGANDMONITORMODE_CHANNEL_MODE_DISABLED);
	[error_code] = obj.adrv9001Device.powerSavingAndMonitorMode.ChannelPowerSaving_Configure(common_ChannelNumber_e.CHANNEL_1, powerSavingCfg_13);
	[error_code] = obj.adrv9001Device.powerSavingAndMonitorMode.ChannelPowerSaving_Configure(common_ChannelNumber_e.CHANNEL_2, powerSavingCfg_13);
	delays_15 = AnalogDevices.EvalClient.Adrv9001.adrv9001_ChannelEnablementDelays_t(1475, 0, 0, 0, 373);
	[error_code] = obj.adrv9001Device.radio.ChannelEnablementDelays_Configure(common_Port_e.RX, common_ChannelNumber_e.CHANNEL_1, delays_15);
	[error_code] = obj.adrv9001Device.radio.ChannelEnablementDelays_Configure(common_Port_e.RX, common_ChannelNumber_e.CHANNEL_2, delays_15);
	delays_17 = AnalogDevices.EvalClient.Adrv9001.adrv9001_ChannelEnablementDelays_t(1475, 0, 343, 0, 0);
	[error_code] = obj.adrv9001Device.radio.ChannelEnablementDelays_Configure(common_Port_e.TX, common_ChannelNumber_e.CHANNEL_1, delays_17);
	[error_code] = obj.adrv9001Device.radio.ChannelEnablementDelays_Configure(common_Port_e.TX, common_ChannelNumber_e.CHANNEL_2, delays_17);
	[error_code] = obj.adrv9001Device.bbdc.adi_adrv9010_bbdc_LoopGain_Set(common_ChannelNumber_e.CHANNEL_1, 65536);
	[error_code] = obj.adrv9001Device.bbdc.adi_adrv9010_bbdc_LoopGain_Set(common_ChannelNumber_e.CHANNEL_2, 65536);
	trackingCals_chanTrackingCalMask_21 = NET.createArray('AnalogDevices.EvalClient.Adrv9001ProfileTypes.adrv9001_TrackingCalibrations_e', 2);
	trackingCals_chanTrackingCalMask_21(1) = System.Enum.Parse(adrv9001_TrackingCalibrations_e().GetType(), 'ADRV9001_TRACKING_CAL_TX_QEC, ADRV9001_TRACKING_CAL_TX_LO_LEAKAGE, ADRV9001_TRACKING_CAL_RX_QEC_WBPOLY, ADRV9001_TRACKING_CAL_ORX_QEC_WBPOLY, ADRV9001_TRACKING_CAL_RX_BBDC, ADRV9001_TRACKING_CAL_RX_RFDC, ADRV9001_TRACKING_CAL_RX_QEC_FIC, ADRV9001_TRACKING_CAL_RX_GAIN_CONTROL_DETECTORS, ADRV9001_TRACKING_CAL_RX_RSSI');
	trackingCals_chanTrackingCalMask_21(2) = System.Enum.Parse(adrv9001_TrackingCalibrations_e().GetType(), 'ADRV9001_TRACKING_CAL_TX_QEC, ADRV9001_TRACKING_CAL_TX_LO_LEAKAGE, ADRV9001_TRACKING_CAL_RX_QEC_WBPOLY, ADRV9001_TRACKING_CAL_ORX_QEC_WBPOLY, ADRV9001_TRACKING_CAL_RX_BBDC, ADRV9001_TRACKING_CAL_RX_RFDC, ADRV9001_TRACKING_CAL_RX_QEC_FIC, ADRV9001_TRACKING_CAL_RX_GAIN_CONTROL_DETECTORS, ADRV9001_TRACKING_CAL_RX_RSSI');
	trackingCals_21 = AnalogDevices.EvalClient.Adrv9001ProfileTypes.adrv9001_TrackingCals_t(trackingCals_chanTrackingCalMask_21);
	[error_code] = obj.adrv9001Device.cals.Tracking_Set(trackingCals_21);
	[error_code] = obj.adrv9001Device.gainControl.Mode_Set(common_ChannelNumber_e.CHANNEL_1, adrv9001_RxGainControlMode_e.ADRV9001_RX_GAIN_CONTROL_MODE_SPI);
	[error_code] = obj.adrv9001Device.rx.Gain_Set(common_ChannelNumber_e.CHANNEL_1, 247);
	[error_code] = obj.adrv9001Device.gainControl.Mode_Set(common_ChannelNumber_e.CHANNEL_2, adrv9001_RxGainControlMode_e.ADRV9001_RX_GAIN_CONTROL_MODE_SPI);
	[error_code] = obj.adrv9001Device.rx.Gain_Set(common_ChannelNumber_e.CHANNEL_2, 247);

end

%% Buffered String Builder
function [buff] = build_str_buff(len, s)
	buff = zeros(1, len);
	ba = uint32(s{1});
	for i = 1:length(s{1})
		buff(i) = ba(i);
	end
end
