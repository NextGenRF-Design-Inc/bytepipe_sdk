% This file contains code automatically generated by a machine.
% It has not been independently verified by any human.
% All code is provided as-is for example purposes only.
% The customer assumes all risks related to the use of this code.


% Transceiver Name: ADRV9002
% Silicon Revision: C0
% Evaluation Board Revision: 2B
% Tx / Rx optimal carrier frequencies: 30 MHz to 3 GHz
% External LO optimal frequencies: 60 MHz to 6 GHz
% 
% FPGA: v8.2.21
% Device Driver API: v48.49.2
% Device Driver Client: v48.49.2
% Firmware: v0.20.0.10
% Profile Generator: v0.50.5.0
% Stream Generator Assembly: v0.7.9.0
% Transceiver Evaluation Software: v0.20.0
% ADRV9001 Plugin: v0.20.0

function Adrv9001_DataCapture( obj ) % obj.fpga9001Device)

	INSTALL_DIRECTORY = 'C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/';
	CLIENT_DIRECTORY = 'C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/';
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.Peitho.dll']);
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.EvalClient.dll']);
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.EvalClient.Installers.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.EvalClient.Adrv9001.Device.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.EvalClient.Fpga9001.Device.dll']);
	import AnalogDevices.Peitho.*;
	import AnalogDevices.EvalClient.*;
	import AnalogDevices.EvalClient.Installers.*;
	import AnalogDevices.EvalClient.Fpga9001.*
	import AnalogDevices.EvalClient.Fpga9001.Device.*
	import AnalogDevices.EvalClient.Adrv9001.*
	import AnalogDevices.EvalClient.Adrv9001.Device.*
	import binary_9.*
	import binary_10.*
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.Adrv9001.ProfileTypes.dll']);
	import AnalogDevices.EvalClient.Adrv9001ProfileTypes.*

	dmaCfg_0 = AnalogDevices.EvalClient.Fpga9001.fpga9001_DmaCfg_t(16384, false, 300000, fpga9001_DmaTrigger_e.FPGA9001_DMA_TRIGGER_IMMEDIATE, fpga9001_CaptureType_e.FPGA9001_CAPTURE_TYPE_RX_DATA, false);
	[error_code] = obj.fpga9001Device.dataChain.PerformTransfer(common_Port_e.RX, common_ChannelNumber_e.CHANNEL_1, dmaCfg_0);
	iData_1 = NET.createArray('System.Int16', 4096);
	qData_1 = NET.createArray('System.Int16', 4096);
	[error_code] = obj.fpga9001Device.dataChain.Data_Get_16I16QSigned(common_Port_e.RX, common_ChannelNumber_e.CHANNEL_1, iData_1, qData_1, 4096);
	printStr = "[ " + iData_1(1);
	for iData_1_indexer = 1:4095
		printStr = printStr + ", " + iData_1(iData_1_indexer + 1);
	end
	printStr = printStr + " ]";
	obj.status_string = sprintf("Data_Get_16I16QSigned parameter 'iData' read back as '" + printStr + "'\n");
	printStr = "[ " + qData_1(1);
	for qData_1_indexer = 1:4095
		printStr = printStr + ", " + qData_1(qData_1_indexer + 1);
	end
	printStr = printStr + " ]";
	obj.status_string = sprintf("Data_Get_16I16QSigned parameter 'qData' read back as '" + printStr + "'\n");
	[error_code] = obj.fpga9001Device.dataChain.PerformTransfer(common_Port_e.RX, common_ChannelNumber_e.CHANNEL_2, dmaCfg_0);
	iData_3 = NET.createArray('System.Int16', 4096);
	qData_3 = NET.createArray('System.Int16', 4096);
	[error_code] = obj.fpga9001Device.dataChain.Data_Get_16I16QSigned(common_Port_e.RX, common_ChannelNumber_e.CHANNEL_2, iData_3, qData_3, 4096);
	printStr = "[ " + iData_3(1);
	for iData_3_indexer = 1:4095
		printStr = printStr + ", " + iData_3(iData_3_indexer + 1);
	end
	printStr = printStr + " ]";
	obj.status_string = sprintf("Data_Get_16I16QSigned parameter 'iData' read back as '" + printStr + "'\n");
	printStr = "[ " + qData_3(1);
	for qData_3_indexer = 1:4095
		printStr = printStr + ", " + qData_3(qData_3_indexer + 1);
	end
	printStr = printStr + " ]";
	obj.status_string = sprintf("Data_Get_16I16QSigned parameter 'qData' read back as '" + printStr + "'\n");
    
    obj.iqRx1 = iData_1.double/2^15 + 1i*qData_1.double;
    obj.iqRx2 = iData_3.double/2^15 + 1i*qData_3.double;

end

%% Buffered String Builder
function [buff] = build_str_buff(len, s)
	buff = zeros(1, len);
	ba = uint32(s{1});
	for i = 1:length(s{1})
		buff(i) = ba(i);
	end
end
