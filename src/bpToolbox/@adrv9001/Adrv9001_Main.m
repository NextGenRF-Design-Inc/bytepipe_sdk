% This file contains code automatically generated by a machine.
% It has not been independently verified by any human.
% All code is provided as-is for example purposes only.
% The customer assumes all risks related to the use of this code.


% Transceiver Name: ADRV9002
% Silicon Revision: C0
% Evaluation Board Revision: 2B
% Tx / Rx optimal carrier frequencies: 30 MHz to 3 GHz
% External LO optimal frequencies: 60 MHz to 6 GHz
% 
% FPGA: v8.2.21
% Device Driver API: v48.49.2
% Device Driver Client: v48.49.2
% Firmware: v0.20.0.10
% Profile Generator: v0.50.5.0
% Stream Generator Assembly: v0.7.9.0
% Transceiver Evaluation Software: v0.20.0
% ADRV9001 Plugin: v0.20.0

function [obj.adrv9001Device, obj.fpga9001Device] = main()

	INSTALL_DIRECTORY = 'C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/';
	CLIENT_DIRECTORY = 'C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/';
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.Peitho.dll']);
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.EvalClient.dll']);
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.EvalClient.Installers.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.Adrv9001.ProfileTypes.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.CommonApi.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.EvalClient.Adrv9001.Device.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.EvalClient.Fpga9001.Device.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.Peitho.dll']);
	import AnalogDevices.Peitho.*;
	import AnalogDevices.EvalClient.*;
	import AnalogDevices.EvalClient.Installers.*;
	import AnalogDevices.EvalClient.Adrv9001.*
	import AnalogDevices.EvalClient.Adrv9001.Device.*
	import AnalogDevices.EvalClient.CommonApi.*
	import AnalogDevices.EvalClient.Fpga9001.*
	import AnalogDevices.EvalClient.Fpga9001.Device.*
	import AnalogDevices.Peitho.*
	import AnalogDevices.EvalClient.Adrv9001ProfileTypes.*
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.Adrv9001.ProfileTypes.dll']);
	import AnalogDevices.EvalClient.Adrv9001ProfileTypes.*


	ipAddress = '192.168.1.10';
	portNumber = '55557';
	username = 'root';
	password = 'analog';
	serverLocation = '/home/analog/adrv9001_server/resources/Adi.Adrv9001.Server/';
	serverName = 'Adrv9001Server_C0';
	serverManager = ServerManager.CreateServerManager(ipAddress, username, password, serverLocation, serverName);
	serverManager.Start();
	connectionAttempts = 0;
	while (~serverManager.IsRunning && connectionAttempts < 5)
		pause(0.2);
		connectionAttempts = connectionAttempts + 1;
	end
	EvalClientManager.Instance.Initialize(CLIENT_DIRECTORY);
	transport = Transports.CreateDefaultTcpTransport([ipAddress ':' portNumber]);
	context = ExecutionContext(transport);
	context.ErrorRetriever = LabviewErrorRetriever();
	context.ErrorHandler = ServerExceptionThrower();
	platform = EvalClientManager.Instance.PlatformBuilder.CreatePlatform(System.String.Empty, context);
	platform.Timeout = 60000;
	boardArray = ToArray(GetRange(platform.Boards, 0, 1));
	board = boardArray(1);
	obj.adrv9001Device = NET.invokeGenericMethod(board, 'DeviceGet', { 'AnalogDevices.EvalClient.Adrv9001.Device.Adrv9001Device' }, 0);
	obj.fpga9001Device = NET.invokeGenericMethod(board, 'DeviceGet', { 'AnalogDevices.EvalClient.Fpga9001.Device.Fpga9001Device' }, 0);


	initialize(obj.adrv9001Device, obj.fpga9001Device);

	calibrate(obj.adrv9001Device);

	configure(obj.adrv9001Device);

	prime(obj.adrv9001Device);

	beginReceiving(obj.adrv9001Device, obj.fpga9001Device);

	dataCapture(obj.fpga9001Device);

	stopReceiving(obj.fpga9001Device);

	beginTransmitting(obj.adrv9001Device, obj.fpga9001Device);

	stopTransmitting(obj.fpga9001Device);


end

%% Buffered String Builder
function [buff] = build_str_buff(len, s)
	buff = zeros(1, len);
	ba = uint32(s{1});
	for i = 1:length(s{1})
		buff(i) = ba(i);
	end
end
