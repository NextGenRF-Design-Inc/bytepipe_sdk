% This file contains code automatically generated by a machine.
% It has not been independently verified by any human.
% All code is provided as-is for example purposes only.
% The customer assumes all risks related to the use of this code.


% Transceiver Name: ADRV9002
% Silicon Revision: C0
% Evaluation Board Revision: 2B
% Tx / Rx optimal carrier frequencies: 30 MHz to 3 GHz
% External LO optimal frequencies: 60 MHz to 6 GHz
% 
% FPGA: v8.2.21
% Device Driver API: v48.49.2
% Device Driver Client: v48.49.2
% Firmware: v0.20.0.10
% Profile Generator: v0.50.5.0
% Stream Generator Assembly: v0.7.9.0
% Transceiver Evaluation Software: v0.20.0
% ADRV9001 Plugin: v0.20.0

function Adrv9001_Calibrate( obj ) % obj.adrv9001Device)

	INSTALL_DIRECTORY = 'C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/';
	CLIENT_DIRECTORY = 'C:/Program Files/Analog Devices/ADRV9001 Transceiver Evaluation Software/';
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.Peitho.dll']);
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.EvalClient.dll']);
	NET.addAssembly([INSTALL_DIRECTORY 'AnalogDevices.EvalClient.Installers.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.Adrv9001.ProfileTypes.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.EvalClient.Adrv9001.Device.dll']);
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.Peitho.dll']);
	import AnalogDevices.Peitho.*;
	import AnalogDevices.EvalClient.*;
	import AnalogDevices.EvalClient.Installers.*;
	import AnalogDevices.Peitho.*
	import AnalogDevices.EvalClient.Adrv9001.*
	import AnalogDevices.EvalClient.Adrv9001.Device.*
	import AnalogDevices.EvalClient.Adrv9001ProfileTypes.*
	import binary_9.*
	import binary_10.*
	NET.addAssembly([CLIENT_DIRECTORY 'AnalogDevices.Adrv9001.ProfileTypes.dll']);
	import AnalogDevices.EvalClient.Adrv9001ProfileTypes.*

%	input('Preparing to calibrate. Turn your signal source OFF, then press Enter.');
	initCals_chanInitCalMask_1 = NET.createArray('AnalogDevices.EvalClient.Adrv9001ProfileTypes.adrv9001_InitCalibrations_e', 2);
	initCals_chanInitCalMask_1(1) = System.Enum.Parse(adrv9001_InitCalibrations_e().GetType(), 'ADRV9001_INIT_CAL_TX_QEC, ADRV9001_INIT_CAL_TX_LO_LEAKAGE, ADRV9001_INIT_CAL_TX_LB_PD, ADRV9001_INIT_CAL_TX_BBAF, ADRV9001_INIT_CAL_TX_BBAF_GD, ADRV9001_INIT_CAL_TX_ATTEN_DELAY, ADRV9001_INIT_CAL_TX_DAC, ADRV9001_INIT_CAL_TX_PATH_DELAY, ADRV9001_INIT_CAL_RX_HPADC_FLASH, ADRV9001_INIT_CAL_RX_LPADC, ADRV9001_INIT_CAL_RX_TIA_CUTOFF, ADRV9001_INIT_CAL_RX_GROUP_DELAY, ADRV9001_INIT_CAL_RX_QEC_TCAL, ADRV9001_INIT_CAL_RX_QEC_FIC, ADRV9001_INIT_CAL_RX_RF_DC_OFFSET, ADRV9001_INIT_CAL_RX_GAIN_PATH_DELAY');
	initCals_chanInitCalMask_1(2) = System.Enum.Parse(adrv9001_InitCalibrations_e().GetType(), 'ADRV9001_INIT_CAL_TX_QEC, ADRV9001_INIT_CAL_TX_LO_LEAKAGE, ADRV9001_INIT_CAL_TX_LB_PD, ADRV9001_INIT_CAL_TX_BBAF, ADRV9001_INIT_CAL_TX_BBAF_GD, ADRV9001_INIT_CAL_TX_ATTEN_DELAY, ADRV9001_INIT_CAL_TX_DAC, ADRV9001_INIT_CAL_TX_PATH_DELAY, ADRV9001_INIT_CAL_RX_HPADC_FLASH, ADRV9001_INIT_CAL_RX_LPADC, ADRV9001_INIT_CAL_RX_TIA_CUTOFF, ADRV9001_INIT_CAL_RX_GROUP_DELAY, ADRV9001_INIT_CAL_RX_QEC_TCAL, ADRV9001_INIT_CAL_RX_QEC_FIC, ADRV9001_INIT_CAL_RX_RF_DC_OFFSET, ADRV9001_INIT_CAL_RX_GAIN_PATH_DELAY');
	initCals_1 = AnalogDevices.EvalClient.Adrv9001ProfileTypes.adrv9001_InitCals_t(adrv9001_InitCalibrations_e(), initCals_chanInitCalMask_1, adrv9001_InitCalMode_e.ADRV9001_INIT_CAL_MODE_ALL, false);
	errorFlag_1 = 0;
	[error_code, errorFlag_1] = obj.adrv9001Device.cals.InitCals_Run(initCals_1, 300000, errorFlag_1);
	readData_2 = 0;
	[error_code, readData_2] = obj.adrv9001Device.spi.Byte_Read(11, readData_2);
	obj.status_string = sprintf("Byte_Read parameter 'readData' read back as '" + readData_2 + "'\n");
	internalPathDelays_ns_3 = NET.createArray('System.UInt32', 6);
	[error_code] = obj.adrv9001Device.cals.InternalPathDelay_Get(common_Port_e.RX, common_ChannelNumber_e.CHANNEL_1, internalPathDelays_ns_3, 6);
	printStr = "[ " + internalPathDelays_ns_3(1);
	for internalPathDelays_ns_3_indexer = 1:5
		printStr = printStr + ", " + internalPathDelays_ns_3(internalPathDelays_ns_3_indexer + 1);
	end
	printStr = printStr + " ]";
	obj.status_string = sprintf("InternalPathDelay_Get parameter 'internalPathDelays_ns' read back as '" + printStr + "'\n");
	internalPathDelays_ns_4 = NET.createArray('System.UInt32', 6);
	[error_code] = obj.adrv9001Device.cals.InternalPathDelay_Get(common_Port_e.TX, common_ChannelNumber_e.CHANNEL_1, internalPathDelays_ns_4, 6);
	printStr = "[ " + internalPathDelays_ns_4(1);
	for internalPathDelays_ns_4_indexer = 1:5
		printStr = printStr + ", " + internalPathDelays_ns_4(internalPathDelays_ns_4_indexer + 1);
	end
	printStr = printStr + " ]";
	obj.status_string = sprintf("InternalPathDelay_Get parameter 'internalPathDelays_ns' read back as '" + printStr + "'\n");
	internalPathDelays_ns_5 = NET.createArray('System.UInt32', 6);
	[error_code] = obj.adrv9001Device.cals.InternalPathDelay_Get(common_Port_e.RX, common_ChannelNumber_e.CHANNEL_2, internalPathDelays_ns_5, 6);
	printStr = "[ " + internalPathDelays_ns_5(1);
	for internalPathDelays_ns_5_indexer = 1:5
		printStr = printStr + ", " + internalPathDelays_ns_5(internalPathDelays_ns_5_indexer + 1);
	end
	printStr = printStr + " ]";
	obj.status_string = sprintf("InternalPathDelay_Get parameter 'internalPathDelays_ns' read back as '" + printStr + "'\n");
	internalPathDelays_ns_6 = NET.createArray('System.UInt32', 6);
	[error_code] = obj.adrv9001Device.cals.InternalPathDelay_Get(common_Port_e.TX, common_ChannelNumber_e.CHANNEL_2, internalPathDelays_ns_6, 6);
	printStr = "[ " + internalPathDelays_ns_6(1);
	for internalPathDelays_ns_6_indexer = 1:5
		printStr = printStr + ", " + internalPathDelays_ns_6(internalPathDelays_ns_6_indexer + 1);
	end
	printStr = printStr + " ]";
	obj.status_string = sprintf("InternalPathDelay_Get parameter 'internalPathDelays_ns' read back as '" + printStr + "'\n");
	minGainIndex_7 = 0;
	maxGainIndex_7 = 0;
	[error_code, minGainIndex_7, maxGainIndex_7] = obj.adrv9001Device.gainControl.MinMaxGainIndex_Get(common_ChannelNumber_e.CHANNEL_1, minGainIndex_7, maxGainIndex_7);
	obj.status_string = sprintf("MinMaxGainIndex_Get parameter 'minGainIndex' read back as '" + minGainIndex_7 + "'\n");
	obj.status_string = sprintf("MinMaxGainIndex_Get parameter 'maxGainIndex' read back as '" + maxGainIndex_7 + "'\n");
	gainTableRows_8_0 = AnalogDevices.EvalClient.Adrv9001.adrv9001_RxGainTableRow_t(0, 0, 0, 0, 0);
	gainTableRows_8 = NET.createArray('AnalogDevices.EvalClient.Adrv9001.adrv9001_RxGainTableRow_t', 69);
	gainTableRows_8(1) = gainTableRows_8_0;
	gainTableRows_8(2) = gainTableRows_8_0;
	gainTableRows_8(3) = gainTableRows_8_0;
	gainTableRows_8(4) = gainTableRows_8_0;
	gainTableRows_8(5) = gainTableRows_8_0;
	gainTableRows_8(6) = gainTableRows_8_0;
	gainTableRows_8(7) = gainTableRows_8_0;
	gainTableRows_8(8) = gainTableRows_8_0;
	gainTableRows_8(9) = gainTableRows_8_0;
	gainTableRows_8(10) = gainTableRows_8_0;
	gainTableRows_8(11) = gainTableRows_8_0;
	gainTableRows_8(12) = gainTableRows_8_0;
	gainTableRows_8(13) = gainTableRows_8_0;
	gainTableRows_8(14) = gainTableRows_8_0;
	gainTableRows_8(15) = gainTableRows_8_0;
	gainTableRows_8(16) = gainTableRows_8_0;
	gainTableRows_8(17) = gainTableRows_8_0;
	gainTableRows_8(18) = gainTableRows_8_0;
	gainTableRows_8(19) = gainTableRows_8_0;
	gainTableRows_8(20) = gainTableRows_8_0;
	gainTableRows_8(21) = gainTableRows_8_0;
	gainTableRows_8(22) = gainTableRows_8_0;
	gainTableRows_8(23) = gainTableRows_8_0;
	gainTableRows_8(24) = gainTableRows_8_0;
	gainTableRows_8(25) = gainTableRows_8_0;
	gainTableRows_8(26) = gainTableRows_8_0;
	gainTableRows_8(27) = gainTableRows_8_0;
	gainTableRows_8(28) = gainTableRows_8_0;
	gainTableRows_8(29) = gainTableRows_8_0;
	gainTableRows_8(30) = gainTableRows_8_0;
	gainTableRows_8(31) = gainTableRows_8_0;
	gainTableRows_8(32) = gainTableRows_8_0;
	gainTableRows_8(33) = gainTableRows_8_0;
	gainTableRows_8(34) = gainTableRows_8_0;
	gainTableRows_8(35) = gainTableRows_8_0;
	gainTableRows_8(36) = gainTableRows_8_0;
	gainTableRows_8(37) = gainTableRows_8_0;
	gainTableRows_8(38) = gainTableRows_8_0;
	gainTableRows_8(39) = gainTableRows_8_0;
	gainTableRows_8(40) = gainTableRows_8_0;
	gainTableRows_8(41) = gainTableRows_8_0;
	gainTableRows_8(42) = gainTableRows_8_0;
	gainTableRows_8(43) = gainTableRows_8_0;
	gainTableRows_8(44) = gainTableRows_8_0;
	gainTableRows_8(45) = gainTableRows_8_0;
	gainTableRows_8(46) = gainTableRows_8_0;
	gainTableRows_8(47) = gainTableRows_8_0;
	gainTableRows_8(48) = gainTableRows_8_0;
	gainTableRows_8(49) = gainTableRows_8_0;
	gainTableRows_8(50) = gainTableRows_8_0;
	gainTableRows_8(51) = gainTableRows_8_0;
	gainTableRows_8(52) = gainTableRows_8_0;
	gainTableRows_8(53) = gainTableRows_8_0;
	gainTableRows_8(54) = gainTableRows_8_0;
	gainTableRows_8(55) = gainTableRows_8_0;
	gainTableRows_8(56) = gainTableRows_8_0;
	gainTableRows_8(57) = gainTableRows_8_0;
	gainTableRows_8(58) = gainTableRows_8_0;
	gainTableRows_8(59) = gainTableRows_8_0;
	gainTableRows_8(60) = gainTableRows_8_0;
	gainTableRows_8(61) = gainTableRows_8_0;
	gainTableRows_8(62) = gainTableRows_8_0;
	gainTableRows_8(63) = gainTableRows_8_0;
	gainTableRows_8(64) = gainTableRows_8_0;
	gainTableRows_8(65) = gainTableRows_8_0;
	gainTableRows_8(66) = gainTableRows_8_0;
	gainTableRows_8(67) = gainTableRows_8_0;
	gainTableRows_8(68) = gainTableRows_8_0;
	gainTableRows_8(69) = gainTableRows_8_0;
	numGainIndicesRead_8 = 0;
	[error_code, numGainIndicesRead_8] = obj.adrv9001Device.rx.GainTable_Read(common_ChannelNumber_e.CHANNEL_1, 255, gainTableRows_8, 69, numGainIndicesRead_8);
	printStr = "[ " + gainTableRows_8(1).rxFeGain + ", " + gainTableRows_8(1).extControl + ", " + gainTableRows_8(1).adcTiaGain + ", " + gainTableRows_8(1).digGain + ", " + gainTableRows_8(1).phaseOffset;
	for gainTableRows_8_indexer = 1:68
		printStr = printStr + ", " + gainTableRows_8(gainTableRows_8_indexer + 1).rxFeGain + ", " + gainTableRows_8(gainTableRows_8_indexer + 1).extControl + ", " + gainTableRows_8(gainTableRows_8_indexer + 1).adcTiaGain + ", " + gainTableRows_8(gainTableRows_8_indexer + 1).digGain + ", " + gainTableRows_8(gainTableRows_8_indexer + 1).phaseOffset;
	end
	printStr = printStr + " ]";
	obj.status_string = sprintf("GainTable_Read parameter 'gainTableRows' read back as '" + printStr + "'\n");
	obj.status_string = sprintf("GainTable_Read parameter 'numGainIndicesRead' read back as '" + numGainIndicesRead_8 + "'\n");
	minGainIndex_9 = 0;
	maxGainIndex_9 = 0;
	[error_code, minGainIndex_9, maxGainIndex_9] = obj.adrv9001Device.gainControl.MinMaxGainIndex_Get(common_ChannelNumber_e.CHANNEL_2, minGainIndex_9, maxGainIndex_9);
	obj.status_string = sprintf("MinMaxGainIndex_Get parameter 'minGainIndex' read back as '" + minGainIndex_9 + "'\n");
	obj.status_string = sprintf("MinMaxGainIndex_Get parameter 'maxGainIndex' read back as '" + maxGainIndex_9 + "'\n");
	gainTableRows_10 = NET.createArray('AnalogDevices.EvalClient.Adrv9001.adrv9001_RxGainTableRow_t', 69);
	gainTableRows_10(1) = gainTableRows_8_0;
	gainTableRows_10(2) = gainTableRows_8_0;
	gainTableRows_10(3) = gainTableRows_8_0;
	gainTableRows_10(4) = gainTableRows_8_0;
	gainTableRows_10(5) = gainTableRows_8_0;
	gainTableRows_10(6) = gainTableRows_8_0;
	gainTableRows_10(7) = gainTableRows_8_0;
	gainTableRows_10(8) = gainTableRows_8_0;
	gainTableRows_10(9) = gainTableRows_8_0;
	gainTableRows_10(10) = gainTableRows_8_0;
	gainTableRows_10(11) = gainTableRows_8_0;
	gainTableRows_10(12) = gainTableRows_8_0;
	gainTableRows_10(13) = gainTableRows_8_0;
	gainTableRows_10(14) = gainTableRows_8_0;
	gainTableRows_10(15) = gainTableRows_8_0;
	gainTableRows_10(16) = gainTableRows_8_0;
	gainTableRows_10(17) = gainTableRows_8_0;
	gainTableRows_10(18) = gainTableRows_8_0;
	gainTableRows_10(19) = gainTableRows_8_0;
	gainTableRows_10(20) = gainTableRows_8_0;
	gainTableRows_10(21) = gainTableRows_8_0;
	gainTableRows_10(22) = gainTableRows_8_0;
	gainTableRows_10(23) = gainTableRows_8_0;
	gainTableRows_10(24) = gainTableRows_8_0;
	gainTableRows_10(25) = gainTableRows_8_0;
	gainTableRows_10(26) = gainTableRows_8_0;
	gainTableRows_10(27) = gainTableRows_8_0;
	gainTableRows_10(28) = gainTableRows_8_0;
	gainTableRows_10(29) = gainTableRows_8_0;
	gainTableRows_10(30) = gainTableRows_8_0;
	gainTableRows_10(31) = gainTableRows_8_0;
	gainTableRows_10(32) = gainTableRows_8_0;
	gainTableRows_10(33) = gainTableRows_8_0;
	gainTableRows_10(34) = gainTableRows_8_0;
	gainTableRows_10(35) = gainTableRows_8_0;
	gainTableRows_10(36) = gainTableRows_8_0;
	gainTableRows_10(37) = gainTableRows_8_0;
	gainTableRows_10(38) = gainTableRows_8_0;
	gainTableRows_10(39) = gainTableRows_8_0;
	gainTableRows_10(40) = gainTableRows_8_0;
	gainTableRows_10(41) = gainTableRows_8_0;
	gainTableRows_10(42) = gainTableRows_8_0;
	gainTableRows_10(43) = gainTableRows_8_0;
	gainTableRows_10(44) = gainTableRows_8_0;
	gainTableRows_10(45) = gainTableRows_8_0;
	gainTableRows_10(46) = gainTableRows_8_0;
	gainTableRows_10(47) = gainTableRows_8_0;
	gainTableRows_10(48) = gainTableRows_8_0;
	gainTableRows_10(49) = gainTableRows_8_0;
	gainTableRows_10(50) = gainTableRows_8_0;
	gainTableRows_10(51) = gainTableRows_8_0;
	gainTableRows_10(52) = gainTableRows_8_0;
	gainTableRows_10(53) = gainTableRows_8_0;
	gainTableRows_10(54) = gainTableRows_8_0;
	gainTableRows_10(55) = gainTableRows_8_0;
	gainTableRows_10(56) = gainTableRows_8_0;
	gainTableRows_10(57) = gainTableRows_8_0;
	gainTableRows_10(58) = gainTableRows_8_0;
	gainTableRows_10(59) = gainTableRows_8_0;
	gainTableRows_10(60) = gainTableRows_8_0;
	gainTableRows_10(61) = gainTableRows_8_0;
	gainTableRows_10(62) = gainTableRows_8_0;
	gainTableRows_10(63) = gainTableRows_8_0;
	gainTableRows_10(64) = gainTableRows_8_0;
	gainTableRows_10(65) = gainTableRows_8_0;
	gainTableRows_10(66) = gainTableRows_8_0;
	gainTableRows_10(67) = gainTableRows_8_0;
	gainTableRows_10(68) = gainTableRows_8_0;
	gainTableRows_10(69) = gainTableRows_8_0;
	numGainIndicesRead_10 = 0;
	[error_code, numGainIndicesRead_10] = obj.adrv9001Device.rx.GainTable_Read(common_ChannelNumber_e.CHANNEL_2, 255, gainTableRows_10, 69, numGainIndicesRead_10);
	printStr = "[ " + gainTableRows_10(1).rxFeGain + ", " + gainTableRows_10(1).extControl + ", " + gainTableRows_10(1).adcTiaGain + ", " + gainTableRows_10(1).digGain + ", " + gainTableRows_10(1).phaseOffset;
	for gainTableRows_10_indexer = 1:68
		printStr = printStr + ", " + gainTableRows_10(gainTableRows_10_indexer + 1).rxFeGain + ", " + gainTableRows_10(gainTableRows_10_indexer + 1).extControl + ", " + gainTableRows_10(gainTableRows_10_indexer + 1).adcTiaGain + ", " + gainTableRows_10(gainTableRows_10_indexer + 1).digGain + ", " + gainTableRows_10(gainTableRows_10_indexer + 1).phaseOffset;
	end
	printStr = printStr + " ]";
	obj.status_string = sprintf("GainTable_Read parameter 'gainTableRows' read back as '" + printStr + "'\n");
	obj.status_string = sprintf("GainTable_Read parameter 'numGainIndicesRead' read back as '" + numGainIndicesRead_10 + "'\n");
	[error_code] = obj.adrv9001Device.tx.DataPath_Loopback_Set(common_ChannelNumber_e.CHANNEL_1, false);
	[error_code] = obj.adrv9001Device.ssi.Loopback_Set(common_ChannelNumber_e.CHANNEL_1, adrv9001_SsiType_e.ADRV9001_SSI_TYPE_LVDS, false);
	[error_code] = obj.adrv9001Device.tx.DataPath_Loopback_Set(common_ChannelNumber_e.CHANNEL_2, false);
	[error_code] = obj.adrv9001Device.ssi.Loopback_Set(common_ChannelNumber_e.CHANNEL_2, adrv9001_SsiType_e.ADRV9001_SSI_TYPE_LVDS, false);
	obj.status_string = sprintf("Calibrations complete.\n");

end

%% Buffered String Builder
function [buff] = build_str_buff(len, s)
	buff = zeros(1, len);
	ba = uint32(s{1});
	for i = 1:length(s{1})
		buff(i) = ba(i);
	end
end
